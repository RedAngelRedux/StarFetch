@inject FavoritesService favoritesService

<div class="card h-100 movie-card">
    <img src="@Movie?.PosterPath" alt="Movie Poster" class="card img-top" />
    <div class="card-body border border-top">
        <div class="card'title" fw-bold lh-1>
            @Movie?.Title
        </div>
        <div class="card-text lh-1 fst-italic">
            @{
                var releaseDate = Movie?.ReleaseDate;
                if (releaseDate != null)
                {
                    var date = DateTime.Parse(releaseDate);
                    <text>Release Date: @date.ToString("MMM d, yyyy")</text>
                }
                else
                {
                    <text>Release Date: N/A</text>
                }
            }
        </div>
    </div>
    <div class="movie-card-footer card-footer d-flex justify-content-between">
        <button class="btn btn-light" onclick="@HandleFavoriteToggle">
            @(IsFavorite ? "Remove Fav" : "Add Fave")
        </button>
        <a href="movieDetail" class="btn btn-dark">More Info</a>
    </div>
</div>

@code {

    [Parameter, EditorRequired]
    public Movie? Movie { get; set; }

    private bool IsFavorite = false;

    [Parameter]
    public EventCallback OnFavoriteToggled { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if(Movie is not null)
        {
            IsFavorite = await favoritesService.IsFavorite(Movie.Id);
        }
    }

    private async Task HandleFavoriteToggle()
    {
        if(Movie is null)
        {
            return;
        }

        if(IsFavorite)
        {
            IsFavorite = false;
            await favoritesService.RemoveFromFavorites(Movie);
        }else
        {
            IsFavorite = true;
            await favoritesService.AddToFavorites(Movie);
        }        

        if(OnFavoriteToggled.HasDelegate)
        {
            await OnFavoriteToggled.InvokeAsync(null);
        }
    }

}
