@page "/now-playing"

@using System.Net.Http.Json
@using System.Text.Json
@using System.Net.Http.Headers

@inject HttpClient http
@inject IConfiguration config

<PageTitle>Now Playing</PageTitle>

<div class="container-xxl py-3">
    <h1>
        <i class="bi bi-film" style="color: var(--cf-theme-800)" />
        Now Playing
    </h1>
    <p class="lead italic">
        Movies that are now playing in a theator near you.
    </p>
    <div class="row g-3 row-cols-1 row-cols-sm-2 row-cols-lg-3 row-cols-xl-4">
        @if(nowPlayingMovies == null && isLoading)
        {
            <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (nowPlayingMovies != null && nowPlayingMovies.Results.Count == 0)
        {
            <div class="alert alert-info" role="alert">
                No movies are currently playing in theaters.
            </div>
        }
        else if (nowPlayingMovies == null)
        {
            <div class="alert alert-danger" role="alert">
                Failed to load now playing movies. Please try again later.
            </div>
        }
        else
        {
            @foreach (var movie in nowPlayingMovies.Results)
            {
                <div class="col">
                    <MovieCard Movie="movie" />
                </div>
            }
        }
    </div>
</div>


@code {

    private MovieListResponse? nowPlayingMovies;
    private string? apiKey;
    private bool isLoading = true;

    private readonly JsonSerializerOptions jsonSerializerOptions = new JsonSerializerOptions
    {
        PropertyNamingPolicy = JsonNamingPolicy.SnakeCaseLower
    };

    protected override async Task OnInitializedAsync()
    {
        apiKey = config["TmdbAccessKey"];
        if (string.IsNullOrEmpty(apiKey))
        {
            throw new InvalidOperationException("TMDB API key is not configured.");
        }
        else
        {
            string url = "https://api.themoviedb.org/3/movie/now_playing?region=US&language=en-US";
            http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", apiKey);
            string imageBaseUrl = "https://image.tmdb.org/t/p/w500";

            MovieListResponse? response = await http.GetFromJsonAsync<MovieListResponse>(url, jsonSerializerOptions)
                ?? throw new HttpIOException(HttpRequestError.InvalidResponse, "Failed to fetch now playing movies.");           

            foreach(var movie in response.Results)
            {
                if (string.IsNullOrEmpty(movie.PosterPath))
                {
                    movie.PosterPath = "img/poster.png";
                }
                else
                {                    
                    movie.PosterPath = $"{imageBaseUrl}{movie.PosterPath}";
                }
            }
            nowPlayingMovies = response;
        }
    }
}
