@page "/search"

@inject IConfiguration config
@inject TMDBService tmdbService

<PageTitle>Search</PageTitle>

<div class="container-xxl py-3">
    <h1 style="color: var(--cf-light-color)">
        <i class="bi bi-search" style="color: var(--cf-theme-core)" />
        Search Movies
    </h1>
    <p class="lead italic">
        Movies matching your search
    </p>
    <div class="row g-3 row-cols-1 row-cols-sm-2 row-cols-lg-3 row-cols-xl-4">
        @if(Blank)
        {
            <div class="alert alert-info" role="alert">
                No search criteria provided. Enter search criteria using the search box in the top navigation bar.
            </div>
        }
        else
        {
            if (searchResults == null && isLoading)
            {
                <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (searchResults != null && searchResults.Results.Count == 0)
            {
                <div class="alert alert-info" role="alert">
                    No movies found matching your search criteria.
                </div>
            }
            else if (searchResults == null)
            {
                <div class="alert alert-danger" role="alert">
                    Failed to load movies matching your search criteria. Please try again later.
                </div>
            }
            else
            {
                foreach (var movie in searchResults.Results)
                {
                    <div class="col">
                        <MovieCard Movie="movie" />
                    </div>
                }
            }
        }
    </div>
</div>    

@code {

    private MovieListResponse? searchResults;
    private bool isLoading = true;

    [SupplyParameterFromQuery]
    private bool Blank { get; set; } = false;

    [SupplyParameterFromQuery]
    private string? Query { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (Blank)
            {
                searchResults = new MovieListResponse
                {
                    Page = 1,
                    Results = new List<Movie>(),
                    TotalPages = 1,
                    TotalResults = 0
                };
                return;
            }
            else if(!string.IsNullOrWhiteSpace(Query))
            {
                isLoading = true;
                searchResults = await tmdbService.SearchMoviesAsync(Query);
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching popular movies: {ex.Message}");
            searchResults = null;
        }
        finally
        {
            isLoading = false;
        }
    }
}
